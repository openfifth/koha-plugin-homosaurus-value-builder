[% USE raw %]
[% PROCESS 'i18n.inc' %]
[% INCLUDE 'doc-head-open.inc' %]
<title>[% FILTER collapse %]
    [% t("Homosaurus search") | html %] &rsaquo; [% t("Cataloging") | html %] &rsaquo; [% t("Koha") | html %]
[% END %]</title>
[% INCLUDE 'doc-head-close.inc' %]
</head>

<body id="cat_homosaurus_search" class="cat value_builder">

<h1>[% t("Homosaurus vocabulary search") | html %]</h1>

<form method="get" name="f_pop" id="f_pop" onsubmit="return false;">
    <!-- Search form -->
    <div class="page-section">
        <fieldset class="brief">
            <legend>[% t("Search") | html %]</legend>
            <div class="search-form-inline">
                <label for="searchTerm" class="search-label">[% t("Term") | html %]:</label>
                <select id="matchType" name="matchType" class="search-select form-select">
                    <option value="starts_with" selected="selected">[% t("Starts with") | html %]</option>
                    <option value="exact">[% t("Exact match") | html %]</option>
                    <option value="contains">[% t("Contains") | html %]</option>
                </select>
                <input type="text" id="searchTerm" name="searchTerm" class="search-input" placeholder="[% t('Enter search term') | html %]" />
                <select id="lang" name="lang" class="search-select form-select">
                    <option value="en" selected="selected">[% t("English") | html %]</option>
                    <option value="es">[% t("Spanish") | html %]</option>
                    <option value="fr">[% t("French") | html %]</option>
                </select>
                <button type="button" class="btn btn-primary search-button" onclick="searchAPI()">
                    <i class="fa fa-search"></i> [% t("Search") | html %]
                </button>
            </div>
        </fieldset>
    </div>

    <!-- Search results and details in two columns -->
    <div class="page-section">
        <div class="row">
            <div class="col-sm-6">
                <fieldset>
                    <legend>[% t("Search results") | html %]</legend>
                    <div id="loadingIndicator" style="display:none; text-align:center; padding:20px;">
                        <i class="fa fa-spinner fa-spin"></i> [% t("Loading...") | html %]
                    </div>
                    <div id="results-list" style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
                        <p class="hint">[% t("Enter a search term above to find Homosaurus vocabulary terms") | html %]</p>
                    </div>
                </fieldset>
            </div>
            
            <div class="col-sm-6">
                <fieldset>
                    <legend>[% t("Concept details & browsing") | html %]</legend>
                    <div id="details-view" style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
                        <div class="browsing-help">
                            <p class="hint"><strong>[% t("How to browse:") | html %]</strong></p>
                            <ul class="help-list">
                                <li>[% t("Click any search result to view concept details and related terms") | html %]</li>
                                <li>[% t("Use 'Select' button here to add the current concept to your selection") | html %]</li>
                                <li>[% t("Explore broader, narrower, or related concepts that appear below") | html %]</li>
                                <li>[% t("Click 'Details' on related concepts to browse further") | html %]</li>
                            </ul>
                        </div>
                    </div>
                </fieldset>
            </div>
        </div>
    </div>

    <!-- Selected terms section -->
    <div class="page-section">
        <fieldset>
            <legend>[% t("Selected terms") | html %] (<span id="selected-count">0</span>)</legend>
            <div id="selected-terms-list" style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; background-color: #f8f9fa;">
                <div class="selection-help">
                    <p class="hint">[% t("Selected terms will appear here") | html %]</p>
                    <div class="workflow-info">
                        <p><strong>[% t("Workflow options:") | html %]</strong></p>
                        <ul class="workflow-list">
                            <li><strong>[% t("Replace field") | html %]:</strong> [% t("Replaces the current MARC field with one selected term") | html %]</li>
                            <li><strong>[% t("Create new fields") | html %]:</strong> [% t("Creates new MARC fields for all selected terms") | html %]</li>
                        </ul>
                    </div>
                </div>
            </div>
        </fieldset>
    </div>

    <!-- Fixed bottom navigation -->
    <nav class="navbar navbar-default fixed-bottom">
        <div class="container-fluid">
            <fieldset class="action">
                <input type="button" class="btn btn-primary btn-sm" value="[% t('Replace field') | html %]" onclick="replaceFieldFromURL()" id="replace-field-btn" disabled />
                <input type="button" class="btn btn-success btn-sm" value="[% t('Create new fields') | html %]" onclick="createFieldFromURL()" id="create-fields-btn" disabled />
                <button class="btn btn-default btn-sm close_window">[% t("Cancel") | html %]</button>
            </fieldset>
        </div>
    </nav>
</form>

[% INCLUDE 'select2.inc' %]
<script>
const API_URL = '[% plugin_url %]';
var selectedTerms = [];
var globalLang = null;

$(document).ready(function() {
    $('.close_window').on('click', function(e) {
        e.preventDefault();
        window.close();
    });
    
    // Prevent form submission
    $('#f_pop').on('submit', function(e) {
        e.preventDefault();
        return false;
    });
    
    $('#searchTerm').on('keypress', function(e) {
        if (e.which === 13) { // Enter key
            e.preventDefault();
            searchAPI();
            return false;
        }
    });
    
    // Initialize Select2 for select elements
    $('#matchType, #lang').select2({
        minimumResultsForSearch: -1, // Hide search box for small lists
        width: '140px',
        allowClear: false // Disable clear option since these are required fields
    });
    
    // Focus on search field
    $('#searchTerm').focus();
});

function searchAPI() {
    var searchTerm = $('#searchTerm').val().trim();
    var selectedLang = $('#lang').val();
    var matchType = $('#matchType').val();

    if (!searchTerm) {
        alert('[% t("Search term cannot be empty") | html %]');
        return;
    }

    var apiUrl = API_URL + '&action=search&searchTerm=' + encodeURIComponent(searchTerm) + 
                 '&lang=' + selectedLang + '&matchType=' + matchType;

    $('#loadingIndicator').show();
    $('#results-list').empty();

    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            displayResults(data);
            $('#loadingIndicator').hide();
        })
        .catch(error => {
            alert('[% t("Error occurred while searching") | html %]: ' + error.message);
            $('#loadingIndicator').hide();
        });
}

function displayResults(data) {
    var resultsList = $('#results-list');
    resultsList.empty();

    if (data.results && data.results.length > 0) {
        data.results.forEach(function(result) {
            var resultItem = $('<div class="result-item clickable">');
            var resultContent = $('<div class="result-content">').text(result.prefLabel);

            resultItem.on('click', function() {
                globalLang = result.lang;
                $('.result-item').removeClass('selected');
                resultItem.addClass('selected');
                displayDetails(result);
            });

            resultItem.append(resultContent);
            resultsList.append(resultItem);
        });
    } else {
        resultsList.append('<p class="warning">[% t("No results found") | html %]</p>');
    }
}

function displayDetails(result) {
    var detailsView = $('#details-view');
    detailsView.empty();

    // Current concept
    var currentDiv = $('<div class="current-concept">');
    currentDiv.append('<strong>[% t("Current concept") | html %]:</strong> ' + result.prefLabel + ' ');
    var selectBtn = $('<button class="btn btn-xs btn-primary">').text('[% t("Select") | html %]');
    selectBtn.on('click', function() {
        addSelectedTerm(result);
    });
    currentDiv.append(selectBtn);
    
    // Add description if available, or fetch it
    if (result.description && result.description.trim() !== '') {
        var descriptionDiv = $('<div class="concept-description">');
        descriptionDiv.append('<p class="description-text">' + result.description + '</p>');
        currentDiv.append(descriptionDiv);
    }
    
    detailsView.append(currentDiv);

    var uri = result.uri;
    var lang = globalLang;

    // Fetch related concepts
    fetchAndDisplayConcepts(uri, lang, 'broader', '[% t("Broader concepts") | html %]');
    fetchAndDisplayConcepts(uri, lang, 'narrower', '[% t("Narrower concepts") | html %]');
    fetchAndDisplayConcepts(uri, lang, 'related', '[% t("Related concepts") | html %]');
}

function fetchAndDisplayConcepts(uri, lang, type, title) {
    var detailsView = $('#details-view');
    var section = $('<div class="concept-section">');
    var loadingDiv = $('<div class="loading">').text('[% t("Loading") | html %] ' + title.toLowerCase() + '...');
    section.append(loadingDiv);
    detailsView.append(section);

    var apiUrl = API_URL + '&action=fetch_concepts&uri=' + encodeURIComponent(uri) + 
                 '&lang=' + encodeURIComponent(lang) + '&type=' + encodeURIComponent(type);

    $.get(apiUrl, function(data) {
        loadingDiv.remove();

        if (data[type] && data[type].length > 0) {
            section.append('<h4>' + title + '</h4>');
            var conceptList = $('<div class="concept-list">');
            
            data[type].forEach(function(concept) {
                if (concept && concept.prefLabel) {
                    var conceptItem = $('<div class="concept-item">');
                    var conceptContent = $('<span class="concept-content">').text(concept.prefLabel);
                    var conceptActions = $('<span class="concept-actions">');
                    var selectBtn = $('<button class="btn btn-xs btn-success">').text('[% t("Select") | html %]');
                    var detailsBtn = $('<button class="btn btn-xs btn-default">').text('[% t("Details") | html %]');

                    selectBtn.on('click', function(e) {
                        e.stopPropagation();
                        addSelectedTerm({
                            prefLabel: concept.prefLabel,
                            uri: concept.uri,
                            lang: globalLang
                        });
                    });

                    detailsBtn.on('click', function() {
                        displayDetails({
                            prefLabel: concept.prefLabel,
                            uri: concept.uri,
                            lang: globalLang
                        });
                    });

                    conceptActions.append(selectBtn).append(' ').append(detailsBtn);
                    conceptItem.append(conceptContent).append(' ').append(conceptActions);
                    conceptList.append(conceptItem);
                }
            });
            section.append(conceptList);
        } else {
            section.append('<p class="hint">[% t("No") | html %] ' + title.toLowerCase() + ' [% t("found") | html %]</p>');
        }
    });
}

function addSelectedTerm(term) {
    if (!selectedTerms.some(t => t.label === term.prefLabel)) {
        selectedTerms.push({
            label: term.prefLabel,
            uri: term.uri,
            lang: globalLang
        });
        updateSelectedTermsList();
    } else {
        alert('[% t("Term is already selected") | html %]: ' + term.prefLabel);
    }
}

function updateSelectedTermsList() {
    var selectedTermsList = $('#selected-terms-list');
    var replaceBtn = $('#replace-field-btn');
    var createBtn = $('#create-fields-btn');
    
    selectedTermsList.empty();
    
    if (selectedTerms.length === 0) {
        selectedTermsList.append($('.selection-help').clone());
        replaceBtn.prop('disabled', true);
        createBtn.prop('disabled', true);
    } else {
        selectedTerms.forEach(function(termObj, index) {
            var termItem = $('<div class="selected-term">');
            var termContent = $('<span class="term-label">').text(termObj.label);
            var removeBtn = $('<button class="btn btn-xs btn-danger">').html('&times;');
            
            removeBtn.on('click', function() {
                selectedTerms.splice(index, 1);
                updateSelectedTermsList();
            });
            
            termItem.append(termContent).append(' ').append(removeBtn);
            selectedTermsList.append(termItem);
        });
        
        // Enable appropriate buttons based on selection count
        if (selectedTerms.length === 1) {
            replaceBtn.prop('disabled', false);
            createBtn.prop('disabled', false);
        } else {
            replaceBtn.prop('disabled', true); // Only allow replace for single selection
            createBtn.prop('disabled', false);
        }
    }
    
    $('#selected-count').text(selectedTerms.length);
}

function getQueryParam(name) {
    var urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(name);
}

function replaceFieldFromURL() {
    var index = getQueryParam('li_id');
    if (index && selectedTerms.length === 1) {
        replaceFieldWorker(index, selectedTerms[0]);
        if (opener && !opener.closed) {
            opener.focus();
        }
        window.close();
    } else if (!index) {
        alert('[% t("No field index found") | html %]');
    } else if (selectedTerms.length === 0) {
        alert('[% t("No terms selected") | html %]');
    } else {
        alert('[% t("Please select exactly one term to replace the field") | html %]');
    }
}

function createFieldFromURL() {
    var index = getQueryParam('li_id');
    if (index && selectedTerms.length > 0) {
        termToTag(index);
    } else if (!index) {
        alert('[% t("No field index found") | html %]');
    } else {
        alert('[% t("No terms selected") | html %]');
    }
}

function termToTag(tagindex) {
    var terms = selectedTerms.map(termObj => [termObj.label, termObj.uri, termObj.lang]);
    addTerms2Rec(tagindex, terms);
    if (opener && !opener.closed) {
        opener.focus();
    }
    window.close();
    return false;
}

function addTerms2Rec(index, terms) {
    var idx = index;
    for (var i = 0; i < terms.length; i++) {
        idx = CloneField(idx);
        addTermWorker(idx, terms[i]);
    }
}

function replaceFieldWorker(index, termObj) {
    var t = opener.document.getElementById(index);
    var tagdata = index.split('_');
    var inputs = t.getElementsByTagName('input');
    
    var tagId = tagdata[1];
    
    for (var i = 0; i < inputs.length; i++) {
        var inputName = inputs[i].name;
        
        if (inputName.indexOf('tag_' + tagId + '_subfield_a') === 0) {
            inputs[i].value = termObj.label; // Label
        }
        if (inputName.indexOf('tag_' + tagId + '_subfield_0') === 0) {
            inputs[i].value = termObj.uri; // URI
        }
        if (inputName.indexOf('tag_' + tagId + '_subfield_2') === 0) {
            inputs[i].value = 'homoit';
        }
        if (inputName.indexOf('tag_' + tagId + '_indicator2') === 0) {
            inputs[i].value = '7';
        }
    }
}

function addTermWorker(index, termArr) {
    var t = opener.document.getElementById(index);
    var tagdata = index.split('_');
    var inputs = t.getElementsByTagName('input');
    
    var tagId = tagdata[1];
    
    for (var i = 0; i < inputs.length; i++) {
        var inputName = inputs[i].name;
        
        if (inputName.indexOf('tag_' + tagId + '_subfield_a') === 0) {
            inputs[i].value = termArr[0]; // Label
        }
        if (inputName.indexOf('tag_' + tagId + '_subfield_0') === 0) {
            inputs[i].value = termArr[1]; // URI
        }
        if (inputName.indexOf('tag_' + tagId + '_subfield_2') === 0) {
            inputs[i].value = 'homoit';
        }
        if (inputName.indexOf('tag_' + tagId + '_indicator2') === 0) {
            inputs[i].value = '7';
        }
    }
}

// Standard Koha field cloning functions (simplified for our needs)
function CloneField(index) {
    var original = opener.document.getElementById(index);
    var clone = original.cloneNode(true);
    var new_key = parseInt(Math.random() * 100000);
    var new_id = original.getAttribute('id') + new_key;
    
    clone.setAttribute('id', new_id);
    
    // Reset input values in clone
    var inputs = clone.getElementsByTagName('input');
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].getAttribute("id") && inputs[i].getAttribute("id").indexOf('tag_') === 0) {
            inputs[i].value = "";
            inputs[i].setAttribute('id', inputs[i].getAttribute('id') + new_key);
            inputs[i].setAttribute('name', inputs[i].getAttribute('name') + new_key);
        }
    }
    
    original.parentNode.insertBefore(clone, original.nextSibling);
    return new_id;
}
</script>

<style>
/* Custom styles for Homosaurus search */

/* Inline search form styling */
.search-form-inline {
    display: flex;
    align-items: center;
    gap: 8px;
    flex-wrap: wrap;
}

.search-label {
    font-weight: 600;
    margin: 0;
    white-space: nowrap;
}

.search-select {
    min-width: 120px;
    max-width: 140px;
}

/* Select2 specific width constraints */
.search-form-inline .select2-container {
    width: auto !important;
    min-width: 120px;
    max-width: 140px;
}

.search-input {
    flex: 1;
    min-width: 200px;
    padding: 6px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.search-button {
    white-space: nowrap;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .search-form-inline {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-input {
        min-width: auto;
        width: 100%;
    }
    
    .search-select {
        width: 100%;
    }
}
.result-item {
    border: 1px solid #ddd;
    padding: 12px 15px;
    margin-bottom: 3px;
    background-color: #fff;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.2s ease;
}

.result-item.clickable:hover {
    background-color: #f8f9fa;
    border-color: #007bff;
    transform: translateX(2px);
    box-shadow: 0 2px 4px rgba(0,123,255,0.1);
}

.result-item.selected {
    background-color: #e6f3ff;
    border-color: #007bff;
    border-width: 2px;
    font-weight: 600;
}

.result-content {
    font-weight: 500;
    color: #495057;
    line-height: 1.3;
}

.result-item.selected .result-content {
    color: #0056b3;
}

.concept-section {
    margin-bottom: 20px;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    background-color: #f8f9fa;
    padding: 12px;
}

.concept-section h4 {
    margin: 0 0 10px 0;
    color: #495057;
    font-size: 15px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 8px;
}

.concept-section h4:before {
    content: '';
    width: 4px;
    height: 16px;
    background-color: #007bff;
    border-radius: 2px;
}

.concept-item {
    padding: 5px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.concept-item:hover {
    background-color: #f8f9fa;
}

.concept-content {
    flex: 1;
    margin-right: 10px;
}

.selected-term {
    padding: 6px 8px;
    margin-bottom: 4px;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 3px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.term-label {
    flex: 1;
    margin-right: 8px;
}

.current-concept {
    padding: 15px;
    background-color: #e6f3ff;
    border: 2px solid #007bff;
    border-radius: 6px;
    margin-bottom: 20px;
}

.concept-description {
    margin-top: 10px;
    padding-top: 10px;
    border-top: 1px solid #ccc;
}

.description-text {
    margin: 5px 0 0 0;
    font-style: italic;
    color: #495057;
    line-height: 1.4;
}

.loading {
    text-align: center;
    padding: 10px;
    color: #6c757d;
    font-style: italic;
}

.hint {
    color: #6c757d;
    font-style: italic;
    text-align: center;
    margin: 20px 0;
}

.browsing-help {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 15px;
    margin-bottom: 15px;
}

.browsing-help .hint {
    text-align: left;
    margin: 0 0 10px 0;
    font-style: normal;
}

.help-list {
    margin: 0;
    padding-left: 20px;
    color: #495057;
}

.help-list li {
    margin-bottom: 5px;
    font-size: 13px;
}

.selection-help {
    text-align: center;
}

.workflow-info {
    background-color: #e6f3ff;
    border: 1px solid #b3d9ff;
    border-radius: 6px;
    padding: 12px;
    margin-top: 15px;
    text-align: left;
}

.workflow-info p {
    margin: 0 0 8px 0;
    color: #495057;
}

.workflow-list {
    margin: 0;
    padding-left: 20px;
    color: #495057;
}

.workflow-list li {
    margin-bottom: 8px;
    font-size: 13px;
    line-height: 1.4;
}

.warning {
    color: #856404;
    background-color: #fff3cd;
    border: 1px solid #ffeaa7;
    padding: 8px;
    border-radius: 4px;
    text-align: center;
}

/* Ensure proper spacing in fieldsets */
fieldset {
    margin-bottom: 15px;
}

fieldset legend {
    font-weight: 600;
    color: #495057;
}

/* Button spacing */
.btn + .btn {
    margin-left: 5px;
}
</style>

[% INCLUDE 'popup-bottom.inc' %]
